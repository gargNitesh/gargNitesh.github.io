{"version":3,"sources":["Components/drop.js","Components/table.js","Components/form.js","App.js","serviceWorker.js","index.js"],"names":["Drop","props","getChange","console","log","handleMenuClick","e","sendAttack","key","setState","value1","state","menu","onClick","this","Item","id","Button","overlay","React","Component","Tables","disabled","course","value","rowSelection","type","onChange","selectedRowKeys","selectedRows","getData","getCheckboxProps","record","name","data","dataSource","columns","title","dataIndex","i","First","getAttack","setData","form","setFieldsValue","Full_Name","email","Date_Of_Birth","Mobile_Number","Select_Course","College_Name","Student_Id","edited","tables","values","length","handleSubmit","preventDefault","validateFields","err","_d","getDate","getMonth","getFullYear","filter","item","data1","sort","a","b","resetFields","getFieldDecorator","style","textAlign","fontSize","marginTop","marginBottom","labelCol","xs","span","sm","wrapperCol","onSubmit","width","marginLeft","marginRight","label","rules","required","message","whitespace","offset","size","htmlType","icon","Form","create","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.d53999d9.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Menu, Dropdown, Button, message, Tooltip } from 'antd';\r\n\r\n\r\n\r\nclass Drop extends React.Component{\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state={\r\n            value1:'Select Course'\r\n        }\r\n    }\r\n    getChange=()=> {\r\n      console.log(\"hello\");\r\n      \r\n    }  \r\n       handleMenuClick=(e)=> {\r\n        this.props.sendAttack(e.key);\r\n        this.setState({\r\n            value1:e.key\r\n        })\r\n      }\r\nrender(){\r\n    const menu = (\r\n        <Menu onClick={this.handleMenuClick}>\r\n          <Menu.Item key=\"Java\">\r\n              JAVA\r\n          </Menu.Item>\r\n          <Menu.Item key=\"Python\">\r\n            Python\r\n          </Menu.Item>\r\n          <Menu.Item key=\"Machine Learing\">\r\n              Machine Learing\r\n          </Menu.Item>\r\n        </Menu>\r\n      );\r\n      \r\n    return(\r\n  <div id=\"components-dropdown-demo-dropdown-button\">\r\n    <Dropdown.Button overlay={menu} >\r\n      {this.state.value1}\r\n    </Dropdown.Button>   \r\n  </div>\r\n);\r\n}\r\n}\r\n\r\n\r\nexport default Drop;","import React, { Component } from 'react';\r\nimport { Table } from 'antd';\r\n\r\nexport default class Tables extends Component {\r\n\r\n    constructor(props){\r\n      super(props);\r\n      this.state={\r\n        course:'',\r\n        value:[]\r\n      }\r\n    }\r\n    state = {\r\n      disabled: true\r\n    };\r\n    render() {\r\n      const rowSelection = {\r\n        type: \"radio\",\r\n        \r\n        onChange: (selectedRowKeys, selectedRows) => {\r\n          this.props.getData(selectedRows);\r\n        },\r\n        getCheckboxProps: record => ({\r\n          disabled: record.name === 'Disabled User', // Column configuration not to be checked\r\n          name: record.name,\r\n        }),\r\n      };\r\n        const {data}=this.props;\r\n   const columns = [\r\n    {\r\n      title: 'Student_Id',\r\n      dataIndex: 'Student_Id',\r\n      key: 'Student_Id',\r\n    },\r\n    {\r\n      title: 'Name',\r\n      dataIndex: 'Full_Name',\r\n      key: 'name',\r\n    },\r\n    {\r\n      title: 'Mobile_Number',\r\n      dataIndex: 'Mobile_Number',\r\n      key: 'Mobile_Number',\r\n    },\r\n    {\r\n      title: 'Email_Id',\r\n      dataIndex: 'email',\r\n      key: 'email',\r\n    },\r\n    {\r\n        title: 'Date_Of_Birth',\r\n        dataIndex: 'date_of_birth',\r\n        key: 'date_of_birth',\r\n      },\r\n      {\r\n        title: 'Course_Selected',\r\n        dataIndex: 'Select_Course',\r\n        key: 'Course_Selected',\r\n      },\r\n      {\r\n        title: 'College_Name',\r\n        dataIndex: 'College_Name',\r\n        key: 'College_Name',\r\n      },\r\n  ];\r\n      return (\r\n    <div> \r\n<center><h1>Student's Details</h1></center>\r\n\r\n<Table rowSelection={rowSelection} dataSource={data} columns={columns} />;\r\n\r\n        </div>\r\n      );\r\n    }\r\n}\r\n  \r\n","import React, { Component } from 'react';\r\nimport { Form, Input, Button,DatePicker } from 'antd';\r\nimport Drop from './drop';\r\nimport Table from './table';\r\nlet i=0;    \r\nexport default class First extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      course:'',\r\n      value:[],\r\n      edited:false\r\n    }\r\n  }\r\n  state = {\r\n    disabled: true\r\n  };\r\n  getAttack = (data) => {\r\n    console.log(data)\r\n    this.setState({course:data});\r\n}\r\nsetData=(data)=>{\r\n  this.props.form.setFieldsValue({ Full_Name: data[0].Full_Name,\r\n    email :data[0].email,\r\n    Date_Of_Birth:data[0].Date_Of_Birth,\r\n    Mobile_Number:data[0].Mobile_Number,\r\n    Select_Course:data[0].Select_Course,\r\n    College_Name:data[0].College_Name,\r\n    Student_Id:data[0].Student_Id\r\n   });\r\n   this.setState({\r\n    edited:true\r\n   })\r\n}\r\ntables = (values) =>{\r\n  if(values.length!=0)\r\n  {\r\n    return <Table data={this.state.value} getData={this.setData}/>;\r\n    //return <Table data={this.props.items} getData={this.setData}/>;\r\n  }\r\n}\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    \r\n    this.props.form.validateFields((err, values) => {\r\n      if(this.state.edited)\r\n      {\r\n           if (!err) {\r\n              values[\"date_of_birth\"]=values.Date_Of_Birth._d.getDate()+\"-\"+(values.Date_Of_Birth._d.getMonth()+1)+\"-\"+values.Date_Of_Birth._d.getFullYear()\r\n              let data=this.state.value.filter(item=>item.Student_Id!==values.Student_Id);\r\n              values[\"Select_Course\"]=this.state.course;\r\n              const list=[...data,values];\r\n              let data1=list.sort((a,b)=>(a.Student_Id>b.Student_Id) ? 1 : -1 );\r\n              this.setState({\r\n                value:[...data1],\r\n                edited:false\r\n              })\r\n          this.props.form.resetFields();\r\n           }\r\n          \r\n      }\r\n      else{\r\n      if (!err) {\r\n              i=i+1;\r\n              values[\"date_of_birth\"]=values.Date_Of_Birth._d.getDate()+\"-\"+(values.Date_Of_Birth._d.getMonth()+1)+\"-\"+values.Date_Of_Birth._d.getFullYear()\r\n              values[\"Student_Id\"]=i;\r\n              values[\"Select_Course\"]=this.state.course;\r\n      this.setState({\r\n          value:[...this.state.value,values]\r\n        })\r\n        \r\n        this.props.form.resetFields()\r\n\r\n           }\r\n          }\r\n    });\r\n  };\r\n  render() {\r\n    const isMobile=false;\r\n    const { getFieldDecorator } = this.props.form;\r\n    const formItemLayout = {\r\n      labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 8 }\r\n      },\r\n      wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 16 }\r\n      }\r\n    };\r\n    \r\n    const tailFormItemLayout = {\r\n      wrapperCol: {\r\n        xs: {\r\n          span: 24,\r\n          offset: 0\r\n        },\r\n        sm: {\r\n          span: 16,\r\n          offset: 8\r\n        }\r\n      }\r\n    };\r\n    return (\r\n      \r\n      <div id=\"hello\">\r\n        <div\r\n          style={{\r\n            textAlign: 'center',\r\n            fontSize: '18x',\r\n            marginTop: '24px',\r\n            marginBottom: '24px'\r\n          }}\r\n        >\r\n          <h1>Welcome to world best Institute!!!!!</h1>\r\n          <div style={{ marginTop: '50px' }} />\r\n          <h2>Codeplanet Technologies Pvt. Ltd.</h2>\r\n        </div>\r\n        <div style={{ marginTop: '50px' }} />\r\n        <Form\r\n          {...formItemLayout}\r\n          onSubmit={this.handleSubmit}\r\n          style={\r\n            isMobile\r\n              ? { width: '300px', marginLeft: 'auto', marginRight: 'auto' }\r\n              : { width: '600px', marginLeft: 'auto', marginRight: 'auto' }\r\n          }\r\n        >\r\n          <Form.Item>\r\n            {getFieldDecorator('Student_Id', {\r\n            })(<Input type=\"hidden\" />)}\r\n          </Form.Item>\r\n          \r\n          <Form.Item label=\"Full Name\">\r\n            {getFieldDecorator('Full_Name', {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: 'Please input your nickname!',\r\n                  whitespace: true\r\n                }\r\n              ]\r\n            })(<Input />)}\r\n          </Form.Item>\r\n          <Form.Item label=\"E-mail\">\r\n            {getFieldDecorator('email', {\r\n              rules: [\r\n                {\r\n                  type: 'email',\r\n                  message: 'The input is not valid E-mail!'\r\n                },\r\n                {\r\n                  required: true,\r\n                  message: 'Please input your E-mail!'\r\n                }\r\n              ]\r\n            })(<Input />)}\r\n          </Form.Item>\r\n          <Form.Item label=\"Mobile number\">\r\n            {getFieldDecorator('Mobile_Number', {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: 'Please input your Phone number!',\r\n                  whitespace: true\r\n                }\r\n              ]\r\n            })(<Input />)}\r\n          </Form.Item>\r\n          <Form.Item label=\"Date Of Birth\">\r\n            {getFieldDecorator('Date_Of_Birth', {\r\n              rules: [\r\n                {\r\n                  required: true\r\n                }\r\n              ],\r\n              \r\n            })(<DatePicker />)}\r\n          </Form.Item>\r\n          <Form.Item label=\"Select Course\">\r\n            {getFieldDecorator('Select_Course', {\r\n               \r\n             })(<Drop sendAttack={this.getAttack} />)}\r\n          </Form.Item>\r\n          \r\n          <Form.Item label=\"College Name\">\r\n            {getFieldDecorator('College_Name', {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: 'Please input your College Name!',\r\n                  whitespace: true\r\n                }\r\n              ]\r\n            })(<Input />)}\r\n          </Form.Item>\r\n          <div style={{ marginTop: '50px' }} />\r\n         \r\n    \r\n          \r\n          <Form.Item {...tailFormItemLayout}>\r\n\r\n            <Button\r\n              type={this.state.edited?\"danger\":'primary'}\r\n              size=\"large\"\r\n              htmlType=\"submit\"\r\n              icon=\"right-circle\"\r\n              style={isMobile ? { marginLeft: '50%' } : {}}\r\n            >\r\n              {this.state.edited?\"update\":\"Submit\"}\r\n            </Button>\r\n          \r\n          </Form.Item>\r\n    \r\n        </Form>\r\n     {this.tables(this.state.value)} \r\n        {/* {this.tables(this.props.items)}\r\n         */}\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\nFirst = Form.create({ name: 'horizontal_Register' })(First);\r\n","import React from 'react';\n\nimport './App.css';\n\nimport \"antd/dist/antd.css\";\n\nimport Form from \"./Components/form\";\n\nclass App extends React.Component {\n  render(){\n\n  return (\n    <div>\n      <Form/>\n    </div>\n  );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}